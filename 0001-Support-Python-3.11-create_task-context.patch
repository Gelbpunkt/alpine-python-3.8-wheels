From 46a4b47c0aa302b882f3de65eb7d3531491c7def Mon Sep 17 00:00:00 2001
From: Jens Reidel <adrian@travitia.xyz>
Date: Thu, 30 Jun 2022 02:05:51 +0200
Subject: [PATCH] Support Python 3.11 create_task context

---
 uvloop/loop.pyi | 2 ++
 uvloop/loop.pyx | 9 ++++++---
 2 files changed, 8 insertions(+), 3 deletions(-)

diff --git a/uvloop/loop.pyi b/uvloop/loop.pyi
index 39285fc..fad4820 100644
--- a/uvloop/loop.pyi
+++ b/uvloop/loop.pyi
@@ -1,5 +1,6 @@
 import asyncio
 import ssl
+from contextvars import Context
 from socket import AddressFamily, SocketKind, _Address, _RetAddress, socket
 from typing import (
     IO,
@@ -49,6 +50,7 @@ class Loop:
         coro: Union[Awaitable[_T], Generator[Any, None, _T]],
         *,
         name: Optional[str] = ...,
+        context: Optional[Context] = ...,
     ) -> asyncio.Task[_T]: ...
     def set_task_factory(
         self,
diff --git a/uvloop/loop.pyx b/uvloop/loop.pyx
index d9b5aaa..dc56927 100644
--- a/uvloop/loop.pyx
+++ b/uvloop/loop.pyx
@@ -1411,7 +1411,7 @@ cdef class Loop:
         """Create a Future object attached to the loop."""
         return self._new_future()
 
-    def create_task(self, coro, *, name=None):
+    def create_task(self, coro, *, name=None, context=None):
         """Schedule a coroutine object.
 
         Return a task object.
@@ -1421,9 +1421,12 @@ cdef class Loop:
         """
         self._check_closed()
         if self._task_factory is None:
-            task = aio_Task(coro, loop=self)
+            task = aio_Task(coro, loop=self, name=name, context=context)
         else:
-            task = self._task_factory(self, coro)
+            if context is None:
+                task = self._task_factory(self, coro)
+            else:
+                task = self._task_factory(self, coro, context=context)
 
         # copied from asyncio.tasks._set_task_name (bpo-34270)
         if name is not None:
-- 
2.36.1

